name,ring,quadrant,isNew,description
"C#",adopt,"Languages and Frameworks",true,"<a href='https://docs.microsoft.com/en-us/dotnet/csharp/'>C#</a> is our language of choice. It's strongly-typed, blends functional and object-oriented programming and works on all the OS we need to support."
"TypeScript",adopt,"Languages and Frameworks",true,"<a href='https://www.typescriptlang.org/'>TypeScript</a> is our default choice for running code in the browser. It's strongly-typed and smoothes out the rough bits of JavaScript."
"Go",hold,"Languages and Frameworks",true,"<a href='https://golang.org/'>Go</a> is the natural language to use when writing cloud native software. But it is now possible to achieve good results in C# anyway."
"Java 8",hold,"Languages and Frameworks",true,"Redgate purchased Flyway, written in <a href='https://www.oracle.com/java/'>Java</a>. We have navigated away from older JVM now that LTS has finally moved on."
"Java 17",adopt,"Languages and Frameworks",true,"Redgate purchased Flyway, written in <a href='https://www.oracle.com/java/'>Java</a>. We now use version 17 as is LTS and now fundamental to our Flyway strategy (we ship v21 but are using v17 language features and changing is a breaking change to the API)"
"Java 25",assess,"Languages and Frameworks",true,"Redgate purchased Flyway, written in <a href='https://www.oracle.com/java/'>Java</a>. 25 is the next LTS and we should seriously consider migrating once its stable."
"Bash",adopt,"Languages and Frameworks",true,"<a href='https://www.gnu.org/software/bash/'>Bash</a> is our default choice for scripting internal tools. Everyone should be familiar with the Bash toolkit."
"Python",adopt,"Languages and Frameworks",true,"<a href='https://www.python.org/'>Python</a> is the most popular language for Machine Learning due to its extensive libraries, frameworks and data science community support. Teams starting new projects that involve AI/ML should default to Python, especially if model training is needed. When used as a scripting tool, Python provides a powerful language for gluing components together. We encourage trialling Python when the alternative would be a large Bash script (caveated by why isn't it easy to write a Bash script?). "
"PowerShell",hold,"Languages and Frameworks",true,"Don't use PowerShell for new projects - prefer Bash."
".NET 8",adopt,"Languages and Frameworks",true,"<a href='https://dotnet.microsoft.com/'>.NET 8</a> is the latest LTS version of .NET, supported until November 10, 2026. It is cross-platform and a great choice for desktop, web and cloud-based applications."
"Web API (ASP.NET Core)",adopt,"Languages and Frameworks",true,"<a href='https://learn.microsoft.com/en-us/aspnet/core/web-api'>ASP.NET Core Web API</a> for building RESTful APIs on .NET"
"React",adopt,"Languages and Frameworks",true,"<a href='https://reactjs.org/'>React</a> makes it painless to create interactive UIs."
"Electron",adopt,"Platforms",true,"Electron has proved itself for developing web-based desktop products. It's our default choice for new desktop-based applications."
"WinForms",hold,"Languages and Frameworks",true,"Don't use WinForms for new projects - prefer Electron."
"WPF",hold,"Languages and Frameworks",true,"Don't use WPF for new projects - prefer Electron."
"Objectâ€“relational mappers (ORMs)",trial,"Languages and Frameworks",true,"Unless working with a large number of simple entities (or support for several different DB Backends), prefer writing SQL directly or using a lightweight object mapper such as <a href='https://github.com/DapperLib/Dapper'>Dapper</a>."
"Blazor",hold,"Languages and Frameworks",true,"<a href='https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor'>Blazor</a> is super exciting. It means we might get to leverage our existing C# skills in the browser. However, we are making good progress standardizing on React, so we're putting this on hold. (see <a href='https://github.com/red-gate/Tech-Radar/issues/361'>discussion to upgrade</a>)"
"Razor Pages",hold,"Languages and Frameworks",true,"<a href='https://learn.microsoft.com/en-us/aspnet/core/razor-pages'>Razor Pages</a> can make coding page-focused scenarios easier and more productive than using controllers and views. We have chosen to adopt React instead."
"MVC (Views)",hold,"Languages and Frameworks",true,"<a href='https://learn.microsoft.com/en-us/aspnet/core/mvc/views'>MVC Views</a> are a way to build web front ends, built ontop of MVC controllers. We have chosen to adopt React instead."
"Project Lombok",adopt,"Languages and Frameworks",true,"<a href=""https://projectlombok.org/"">Project Lombok</a> is a Java code enhancement for introducing a set of tools to reduce boiler plating and increase developer efficiency and allowing for a more C# style of coding to help on-board new developers from the wider Red Gate environment"
"jUnit 4",adopt,"Languages and Frameworks",true,"Test framework for Java code"
"Visual Studio",adopt,"Tools",true,"Visual Studio is our default IDE for developing in C#. We get the Enterprise edition via our MSDN subscription."
"Rider",adopt,"Tools",true,"Many teams use Rider instead of Visual Studio for their development. We have licenses for it."
"VS Code",adopt,"Tools",true,"A free lightweight IDE. Our text editor of choice."
"IntelliJ",adopt,"Tools",true,"An IDE for Java with a wide range of tools and plugins avalible. We have licenses for it."
"GitHub",adopt,"Tools",true,"All development should use GitHub."
"TeamCity",hold,"Tools",true,"New projects must use GitHub Actions. We want to phase out TeamCity by late 2025."
"Circle CI",hold,"Tools",true,"New projects must use GitHub Actions. We want to phase out Circle CI by September 2025."
"Azure DevOps",hold,"Tools",true,"New projects must use GitHub Actions instead of TeamCity. We want to phase out Azure Devops by early 2026."
"GitHub Actions",adopt,"Tools",true,"<a href='https://docs.github.com/en/actions'>GitHub Actions</a> is our default CI/CD system. See this <a href='https://info.red-gate.com/rg/blog/2025/03/moving-to-github-actions'>internal post</a> for more details."
"Redgate.Build",hold,"Tools",true,"Redgate.Build is our own PowerShell based build scripts. Over time it's become complicated and we wouldn't recommend it for new projects."
"Terraform",adopt,"Tools",true,"Used for automating infrastructure provisioning."
"Application Insights",adopt,"Tools",true,"All applications should use Application Insights as the default developer telemetry platform (incl. feature usage and error reporting)."
"OpenTelemetry",adopt,"Languages and Frameworks",true,"The industry has converged on this as the framework of choice for telemetry, all major vendors, including Application Insights, support the OpenTelemetry Protocol (OTLP). We should migrate away from the native AppInsights SDK."
"JDBC",adopt,"Tools",true,"Database connectivity for Java."
"Flyway",adopt,"Tools",true,"Our default tool for migrating database schemas."
"WSL 2",adopt,"Tools",true,"Windows Subsystem for Linux should be installed on every development machine"
"SignalR",adopt,"Tools",true,"<a href='https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-5.0'>SignalR</a> is our default choice for push-functionality."
"Hashicorp Vault",adopt,"Tools",true,"We recommend <a href='https://www.vaultproject.io/'>Hashicorp Vault</a> for storing secrets."
"Keepass files in GitHub",hold,"Tools",true,"Use a password manager (or Vault) instead."
"Docker",adopt,"Tools",true,"Docker should be used as the default containerisation technology. Used for building, testing and deployment."
"gRPC",trial,"Tools",true,"<a href='https://grpc.io/'>gRPC</a> is a high-performance RPC framework which we may investigate for high-volume data collection (for example, SQL Monitor)."
"Snyk",adopt,"Tools",true,"We use Snyk to scan for known vulnerabilities in our products' dependencies."
"Virtualbox based Vagrant boxes",hold,"Tools",true,"Use Docker instead where possible. UI and manual testing may still use Virtualbox."
"Amazon Web Services",adopt,"Platforms",true,"AWS is our default cloud provider. It should be the default choice for any SaaS offerings. Any long-lived services should be deployed into our AWS landing zone which gives appropriate controls to satisfy InfoSec requirements."
"Azure",adopt,"Platforms",true,"Azure should only be used for replicating customer environments."
"Google Cloud Platform",adopt,"Platforms",true,"GCP should only be used for replicating customer environments."
"Redgate Platform",hold,"Platforms",true,"Redgate Platform was an early project to try and bring all of our products under a common architecture. It should no longer be used."
"Kubernetes",hold,"Platforms",true,"<a href='https://kubernetes.io/'>K8S</a> is the undeniable winner of orchestration tools."
"SQL Server as backing store",adopt,"Platforms",true,"When a product needs to store more complex data than it can fit in a flat file, we ask the customer for a SQL DB."
"PostgreSQL as backing store",trial,"Platforms",true,"If there's a very good reason to use a lightweight/free database engine, we should choose Postgres."
"Multi-OS (Windows, Linux x64 (.NET supported versions), macOS)",adopt,"Platforms",true,"All three must be supported platforms."
"Virtual Machines",hold,"Platforms",true,"Prefer using lightweight Docker containers."
"CLIs",adopt,"Techniques",true,"Product should, where possible, expose functionality via a CLI."
"RESTful APIs",adopt,"Techniques",true,"A REST architectural style is our default choice for building web APIs. Deviations can be made when it makes sense to do so."
"Containerised products",assess,"Techniques",true,"Where possible, all new products should be built to be containerised. We should ship the Mac/Linux versions of our products inside Docker containers."
"Infrastructure as code",adopt,"Techniques",true,"Infrastructure should be provisioned through code rather than manually (except for ad-hoc testing)"
"Automated code style settings",adopt,"Techniques",true,"Codebases should be formatted consistently. Automated code-style settings achieve this without fuss."
"Static code analysis (linters)",adopt,"Techniques",true,"Static code analysis is invaluable for automatically checking for problems in code. We use ESLint for JS and Roslyn-based analyzers for .NET. We also experimented with SonarQube but our implementation wasn't giving us confidence."
"Semantic Versioning",adopt,"Techniques",true,"We should use semver for all our versioning needs unless there's a compelling reason not to."
"Database Agnosticism",adopt,"Techniques",true,"We aim for feature parity between products that support different database engines."
"Feature Flags",adopt,"Techniques",true,"Feature Flags are a great technique for minimizing long-lived feature branches. Our recommendation is to focus on simplicity - if you find yourself writing substantial code to support Feature Flags, consider using a third-party solution."
"Continuous delivery",adopt,"Techniques",true,"Products should be ready for release at any time."
"Continuous Deployment",assess,"Techniques",true,"We'd like to evaluate technology that increases our deployment frequency, with a view to getting value into the hands of our users as quickly as possible."
"Build inside Docker containers",adopt,"Techniques",true,"We should reduce build dependencies by building and testing our products inside containers. This is a pre-requisite for performing builds on cloud based CI providers."
"AI/ML",assess,"Techniques",true,"AI/ML are becoming commoditized. Off-the-shelf software is available for predictive modelling, text analysis, anomaly detection and much more."
"Automation/Low-code solutions",assess,"Techniques",true,"Remote is driving a digital transformation across industries. Low-code solutions, such as Power Apps, allow organizations to modernize these processes."
"Git Ops",trial,"Techniques",true,"The core idea of GitOps is having a Git repository that always contains declarative descriptions of the infrastructure currently desired in the production environment and an automated process to make the production environment match the described state in the repository. If you want to deploy a new application or update an existing one, you only need to update the repository - the automated process handles everything else. Itâ€™s like having cruise control for managing your applications in production. <a href='https://www.gitops.tech/'>Read more</a>, currently being trialled for Platform Hosted"
"DAPR",trial,"Languages and Frameworks",true,"DAPR (Distributed Application Runtime - <a href='https://dapr.io/'>https://dapr.io/</a>) is an abstraction layer for use in a distributed application, currently being trialled by Platform for both Hosted and Enterprise. It is used to standardise how to communicate external systems in such a way we can uniformly add features through the DAPR sidecar"
"Asynchronous state management in React",adopt,"Techniques",true,"Asynchronous state management in React should be delegated to a third-party framework such as <a href='https://tanstack.com/query/v4/docs/overview'>react-query</a>. This avoids manual management of promises' states (e.g. loading/errors), and allows using suspense and error boundaries in modern React."
"OpenAPI",adopt,"Tools",true,"The OpenAPI Specification is a specification language for HTTP APIs that provides a standardized means to define your API to others. You can quickly discover how an API works, configure infrastructure, generate client code, and create test cases for your APIs."
"Async API",trial,"Tools",true,"<a href='https://www.asyncapi.com/'>https://www.asyncapi.com/</a> is an open-Source tools to easily build and maintain your event-driven architecture. All powered by the AsyncAPI specification, claims to be the industry standard for defining asynchronous APIs."
"Vite",adopt,"Tools",true,"Vite is a front end tooling that can replace webpack. It is faster and improves the developer experience."
"Webpack",hold,"Tools",true,"Webpack is a build tool, it's main purpose is to bundle JavaScript files for usage in a browser."
"RestSharp",adopt,"Languages and Frameworks",true,"<a href='https://restsharp.dev/'>RestSharp</a> is a simple, open-source REST and HTTP API client for .NET. It's an easy-to-use and flexible tool that allows developers to interact with HTTP services from .NET applications"

